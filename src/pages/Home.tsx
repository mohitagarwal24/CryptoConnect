import ScrollingLogos from "../components/ScrollingLogos";
import Footer from '../components/Footer';
import RegisterModal from "../components/RegisterModal";
import useMetaMask from "../hooks/UseMetamask";
import { useEffect, useState } from "react";
import { checkUserExists, saveUser, getUser } from "../hooks/useRealtimeDatabase";
import { ethers } from "ethers";
import abi from "../build/Bridge.json"


const chainData: { [key: number]: { router: string; link: string; destinationChainSelector: string; ccip: string } } = {
  11155111 : { // Ethereum Sepolia
      router: '0x0BF3dE8c5D3e8A2B34D2BEeB17ABfCeBaf363A59',
      link: '0x779877A7B0D9E8603169DdbD7836e478b4624789',
      destinationChainSelector: "16015286601757825753",
      ccip: "0xFd57b4ddBf88a4e07fF4e34C487b99af2Fe82a05"
  },
  80002: { // Polygon Amoy
      router: '0x9C32fCB86BF0f4a1A8921a9Fe46de3198bb884B2',
      link: '0x0Fd9e8d3aF1aaee056EB9e802c3A762a667b1904',
      destinationChainSelector: "16281711391670634445",
      ccip: "0xcab0EF91Bee323d1A617c0a027eE753aFd6997E4"
  },
};

const Home = () => {
    const [showModal, setShowModal] = useState(false);
    const [user, setUser] = useState<any>(null);
    const { account, provider } = useMetaMask();

    useEffect(() => {
      const fetchUser = async () => {
          if (account) {
              console.log("Checking user existence for:", account);
              const exists = await checkUserExists(account);
              console.log("User exists:", exists);
              if (exists) {
                  const _user = await getUser(account);
                  setUser(_user);
                  console.log("User details:", _user);
              } else {
                  setShowModal(true);
              }
          } else {
              setShowModal(false);
              setUser(null);
          }
      };
      fetchUser();
    }, [account]); 
  

    // Function to fund the agent wallet with LINK and CCIP tokens
const fundAgentWallet = async (agentAddress: string, provider: ethers.BrowserProvider) => {
  // Get the network and chainId
  const network = await provider.getNetwork();
  const chainId = Number(network.chainId);

  // CCIP Token Transfer
  const ccipToken = new ethers.Contract(chainData[chainId].ccip, ["function transfer(address to, uint256 amount) public returns (bool)"], await provider.getSigner());
  const ccipAmount = ethers.parseUnits("0.1", 18); // Amount in CCIP tokens

  try {
    // Sending CCIP tokens to agent wallet
    const ccipTx = await ccipToken.transfer(agentAddress, ccipAmount);
    await ccipTx.wait(); // Wait for the transaction to be mined
    console.log(`Funded agent wallet with ${ccipAmount} CCIP tokens`);
  } catch (error) {
    console.error("Error funding with CCIP tokens:", error);
  }

  // LINK Token Transfer
  const linkToken = new ethers.Contract(chainData[chainId].link, ["function transfer(address to, uint256 amount) public returns (bool)"], await provider.getSigner());
  const linkAmount = ethers.parseUnits("25", 18); // Amount in LINK tokens

  try {
    // Sending LINK tokens to agent wallet
    const linkTx = await linkToken.transfer(agentAddress, linkAmount);
    await linkTx.wait(); // Wait for the transaction to be mined
    console.log(`Funded agent wallet with ${linkAmount} LINK tokens`);
  } catch (error) {
    console.error("Error funding with LINK tokens:", error);
  }
};

    const handleSaveUser = async (username: string) => {
      if (provider){
        const agentWallet = ethers.Wallet.createRandom();
      console.log('Agent Wallet Address:', agentWallet.address);
      console.log('Agent Wallet Private Key:', agentWallet.privateKey); 
      
      const signer = provider.getSigner();
    const tx = (await signer)?.sendTransaction({
      to: agentWallet.address,
      value: ethers.parseEther("0.025") // Adjust amount as needed
    });

    (await tx)?.wait(); // Wait for confirmation
    console.log("Agent Wallet funded with 0.025 ETH");

    // Fund the agent wallet with LINK and CCIP tokens
    await fundAgentWallet(agentWallet.address, provider);
    
      if (username.trim() !== "") {
        await saveUser(account as string, username, agentWallet.address, agentWallet.privateKey, "");
        setShowModal(false);
      }
      await waitForBalanceUpdate(agentWallet.address, provider);
      const balance = await provider?.getBalance(agentWallet.address);
      if (balance) {
        console.log("Agent Wallet Balance:", ethers.formatEther(balance));
      }
      
      deployContract();
      }
    };

    const waitForBalanceUpdate = async (walletAddress: string, provider: ethers.BrowserProvider) => {
      let retries = 10; // Max retries (adjustable)
      const signer = await provider.getSigner(); // Extract signer
      const rpcProvider = signer.provider; // Get underlying RPC provider
  
      while (retries > 0) {
          const balance = await rpcProvider.getBalance(walletAddress); // Fetch balance
          if (balance >= ethers.parseEther("0.01")) {  
              console.log(`Balance updated: ${ethers.formatEther(balance)} ETH`);
              return;
          }
          console.log("Balance not updated yet. Retrying...");
          await new Promise(res => setTimeout(res, 5000)); // Wait 5 seconds
          retries--;
      }
      console.error("Timeout waiting for balance update. Ensure funds are received.");
  };
  
    async function deployContract() {
      if (provider) {
        const bytecode = "608060405234801562000010575f80fd5b50604051620026263803806200262683398181016040528101906200003691906200034c565b33805f8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620000aa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000a190620003ef565b60405180910390fd5b815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146200012f576200012e81620001ba60201b60201c565b5b5050508160035f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060045f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506200047d565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036200022b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000222906200045d565b60405180910390fd5b8060015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff165f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6200031682620002eb565b9050919050565b62000328816200030a565b811462000333575f80fd5b50565b5f8151905062000346816200031d565b92915050565b5f8060408385031215620003655762000364620002e7565b5b5f620003748582860162000336565b9250506020620003878582860162000336565b9150509250929050565b5f82825260208201905092915050565b7f43616e6e6f7420736574206f776e657220746f207a65726f00000000000000005f82015250565b5f620003d760188362000391565b9150620003e482620003a1565b602082019050919050565b5f6020820190508181035f8301526200040881620003c9565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c660000000000000000005f82015250565b5f6200044560178362000391565b915062000452826200040f565b602082019050919050565b5f6020820190508181035f830152620004768162000437565b9050919050565b61219b806200048b5f395ff3fe608060405260043610610089575f3560e01c806379ba50971161005857806379ba50971461015c5780638da5cb5b1461017257806395e1402c1461019c57806396d3b83d146101d8578063f2fde38b1461020057610090565b80630bb106eb146100945780633aeac4e1146100d057806351419b4b146100f857806351cff8d91461013457610090565b3661009057005b5f80fd5b34801561009f575f80fd5b506100ba60048036038101906100b59190611677565b610228565b6040516100c791906116bc565b60405180910390f35b3480156100db575f80fd5b506100f660048036038101906100f1919061172f565b610245565b005b348015610103575f80fd5b5061011e600480360381019061011991906117a0565b610331565b60405161012b919061181c565b60405180910390f35b34801561013f575f80fd5b5061015a60048036038101906101559190611835565b61069c565b005b348015610167575f80fd5b50610170610794565b005b34801561017d575f80fd5b50610186610923565b604051610193919061186f565b60405180910390f35b3480156101a7575f80fd5b506101c260048036038101906101bd91906117a0565b61094a565b6040516101cf919061181c565b60405180910390f35b3480156101e3575f80fd5b506101fe60048036038101906101f991906118b2565b610ee3565b005b34801561020b575f80fd5b5061022660048036038101906102219190611835565b610f2b565b005b6002602052805f5260405f205f915054906101000a900460ff1681565b61024d610f3f565b5f8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610287919061186f565b602060405180830381865afa1580156102a2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102c69190611904565b90505f8103610301576040517fd0d04f6000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61032c83828473ffffffffffffffffffffffffffffffffffffffff16610fce9092919063ffffffff16565b505050565b5f61033a610f3f565b8460025f8267ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff166103ae57806040517f0a503cdb0000000000000000000000000000000000000000000000000000000081526004016103a5919061193e565b60405180910390fd5b845f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610414576040517fa05ff47e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f6104218787875f611054565b90505f60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166320487ded8a846040518363ffffffff1660e01b8152600401610480929190611b5c565b602060405180830381865afa15801561049b573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104bf9190611904565b9050478111156105085747816040517f8f0f42060000000000000000000000000000000000000000000000000000000081526004016104ff929190611b99565b60405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff1663095ea7b360035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16886040518363ffffffff1660e01b8152600401610564929190611bc0565b6020604051808303815f875af1158015610580573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105a49190611bfb565b5060035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166396f4e9f9828b856040518463ffffffff1660e01b8152600401610602929190611b5c565b60206040518083038185885af115801561061e573d5f803e3d5ffd5b50505050506040513d601f19601f820116820180604052508101906106439190611c50565b94508867ffffffffffffffff16857fc15fb748c32ba4eb29c1c311e78533f93b4425eab49ea87c6fe4279ecadca0438a8a8a5f87604051610688959493929190611c7b565b60405180910390a350505050949350505050565b6106a4610f3f565b5f4790505f81036106e1576040517fd0d04f6000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8273ffffffffffffffffffffffffffffffffffffffff168260405161070690611cf9565b5f6040518083038185875af1925050503d805f8114610740576040519150601f19603f3d011682016040523d82523d5f602084013e610745565b606091505b505090508061078f573383836040517f9d11f56300000000000000000000000000000000000000000000000000000000815260040161078693929190611d0d565b60405180910390fd5b505050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610823576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081a90611d9c565b60405180910390fd5b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050335f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505f60015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b5f610953610f3f565b8460025f8267ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff166109c757806040517f0a503cdb0000000000000000000000000000000000000000000000000000000081526004016109be919061193e565b60405180910390fd5b845f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a2d576040517fa05ff47e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f610a5b87878760045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611054565b90505f60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166320487ded8a846040518363ffffffff1660e01b8152600401610aba929190611b5c565b602060405180830381865afa158015610ad5573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610af99190611904565b905060045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610b55919061186f565b602060405180830381865afa158015610b70573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b949190611904565b811115610c725760045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610bf5919061186f565b602060405180830381865afa158015610c10573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c349190611904565b816040517f8f0f4206000000000000000000000000000000000000000000000000000000008152600401610c69929190611b99565b60405180910390fd5b60045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b360035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401610cef929190611bc0565b6020604051808303815f875af1158015610d0b573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d2f9190611bfb565b508673ffffffffffffffffffffffffffffffffffffffff1663095ea7b360035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16886040518363ffffffff1660e01b8152600401610d8c929190611bc0565b6020604051808303815f875af1158015610da8573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610dcc9190611bfb565b5060035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166396f4e9f98a846040518363ffffffff1660e01b8152600401610e29929190611b5c565b6020604051808303815f875af1158015610e45573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e699190611c50565b94508867ffffffffffffffff16857fc15fb748c32ba4eb29c1c311e78533f93b4425eab49ea87c6fe4279ecadca0438a8a8a60045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687604051610ecf959493929190611c7b565b60405180910390a350505050949350505050565b610eeb610f3f565b8060025f8467ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055505050565b610f33610f3f565b610f3c81611191565b50565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610fcc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fc390611e04565b60405180910390fd5b565b61104f8363a9059cbb60e01b8484604051602401610fed929190611bc0565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506112bb565b505050565b61105c6115c4565b5f600167ffffffffffffffff81111561107857611077611e22565b5b6040519080825280602002602001820160405280156110b157816020015b61109e611608565b8152602001906001900390816110965790505b50905060405180604001604052808673ffffffffffffffffffffffffffffffffffffffff16815260200185815250815f815181106110f2576110f1611e4f565b5b60200260200101819052506040518060a0016040528087604051602001611119919061186f565b604051602081830303815290604052815260200160405180602001604052805f81525081526020018281526020018473ffffffffffffffffffffffffffffffffffffffff16815260200161118360405180604001604052805f815260200160011515815250611380565b815250915050949350505050565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036111ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f690611ec6565b60405180910390fd5b8060015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff165f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b5f61131c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166113ff9092919063ffffffff16565b90505f8151111561137b578080602001905181019061133b9190611bfb565b61137a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137190611f54565b60405180910390fd5b5b505050565b606063181dcf1060e01b8260405160240161139b9190611fae565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050919050565b606061140d84845f85611416565b90509392505050565b60608247101561145b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145290612037565b60405180910390fd5b5f808673ffffffffffffffffffffffffffffffffffffffff1685876040516114839190612085565b5f6040518083038185875af1925050503d805f81146114bd576040519150601f19603f3d011682016040523d82523d5f602084013e6114c2565b606091505b50915091506114d3878383876114df565b92505050949350505050565b60608315611540575f835103611538576114f885611553565b611537576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152e906120e5565b60405180910390fd5b5b82905061154b565b61154a8383611575565b5b949350505050565b5f808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b5f825111156115875781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115bb9190612145565b60405180910390fd5b6040518060a001604052806060815260200160608152602001606081526020015f73ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b60405180604001604052805f73ffffffffffffffffffffffffffffffffffffffff1681526020015f81525090565b5f80fd5b5f67ffffffffffffffff82169050919050565b6116568161163a565b8114611660575f80fd5b50565b5f813590506116718161164d565b92915050565b5f6020828403121561168c5761168b611636565b5b5f61169984828501611663565b91505092915050565b5f8115159050919050565b6116b6816116a2565b82525050565b5f6020820190506116cf5f8301846116ad565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6116fe826116d5565b9050919050565b61170e816116f4565b8114611718575f80fd5b50565b5f8135905061172981611705565b92915050565b5f806040838503121561174557611744611636565b5b5f6117528582860161171b565b92505060206117638582860161171b565b9150509250929050565b5f819050919050565b61177f8161176d565b8114611789575f80fd5b50565b5f8135905061179a81611776565b92915050565b5f805f80608085870312156117b8576117b7611636565b5b5f6117c587828801611663565b94505060206117d68782880161171b565b93505060406117e78782880161171b565b92505060606117f88782880161178c565b91505092959194509250565b5f819050919050565b61181681611804565b82525050565b5f60208201905061182f5f83018461180d565b92915050565b5f6020828403121561184a57611849611636565b5b5f6118578482850161171b565b91505092915050565b611869816116f4565b82525050565b5f6020820190506118825f830184611860565b92915050565b611891816116a2565b811461189b575f80fd5b50565b5f813590506118ac81611888565b92915050565b5f80604083850312156118c8576118c7611636565b5b5f6118d585828601611663565b92505060206118e68582860161189e565b9150509250929050565b5f815190506118fe81611776565b92915050565b5f6020828403121561191957611918611636565b5b5f611926848285016118f0565b91505092915050565b6119388161163a565b82525050565b5f6020820190506119515f83018461192f565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b8381101561198e578082015181840152602081019050611973565b5f8484015250505050565b5f601f19601f8301169050919050565b5f6119b382611957565b6119bd8185611961565b93506119cd818560208601611971565b6119d681611999565b840191505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b611a13816116f4565b82525050565b611a228161176d565b82525050565b604082015f820151611a3c5f850182611a0a565b506020820151611a4f6020850182611a19565b50505050565b5f611a608383611a28565b60408301905092915050565b5f602082019050919050565b5f611a82826119e1565b611a8c81856119eb565b9350611a97836119fb565b805f5b83811015611ac7578151611aae8882611a55565b9750611ab983611a6c565b925050600181019050611a9a565b5085935050505092915050565b5f60a083015f8301518482035f860152611aee82826119a9565b91505060208301518482036020860152611b0882826119a9565b91505060408301518482036040860152611b228282611a78565b9150506060830151611b376060860182611a0a565b5060808301518482036080860152611b4f82826119a9565b9150508091505092915050565b5f604082019050611b6f5f83018561192f565b8181036020830152611b818184611ad4565b90509392505050565b611b938161176d565b82525050565b5f604082019050611bac5f830185611b8a565b611bb96020830184611b8a565b9392505050565b5f604082019050611bd35f830185611860565b611be06020830184611b8a565b9392505050565b5f81519050611bf581611888565b92915050565b5f60208284031215611c1057611c0f611636565b5b5f611c1d84828501611be7565b91505092915050565b611c2f81611804565b8114611c39575f80fd5b50565b5f81519050611c4a81611c26565b92915050565b5f60208284031215611c6557611c64611636565b5b5f611c7284828501611c3c565b91505092915050565b5f60a082019050611c8e5f830188611860565b611c9b6020830187611860565b611ca86040830186611b8a565b611cb56060830185611860565b611cc26080830184611b8a565b9695505050505050565b5f81905092915050565b50565b5f611ce45f83611ccc565b9150611cef82611cd6565b5f82019050919050565b5f611d0382611cd9565b9150819050919050565b5f606082019050611d205f830186611860565b611d2d6020830185611860565b611d3a6040830184611b8a565b949350505050565b5f82825260208201905092915050565b7f4d7573742062652070726f706f736564206f776e6572000000000000000000005f82015250565b5f611d86601683611d42565b9150611d9182611d52565b602082019050919050565b5f6020820190508181035f830152611db381611d7a565b9050919050565b7f4f6e6c792063616c6c61626c65206279206f776e6572000000000000000000005f82015250565b5f611dee601683611d42565b9150611df982611dba565b602082019050919050565b5f6020820190508181035f830152611e1b81611de2565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f43616e6e6f74207472616e7366657220746f2073656c660000000000000000005f82015250565b5f611eb0601783611d42565b9150611ebb82611e7c565b602082019050919050565b5f6020820190508181035f830152611edd81611ea4565b9050919050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e5f8201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b5f611f3e602a83611d42565b9150611f4982611ee4565b604082019050919050565b5f6020820190508181035f830152611f6b81611f32565b9050919050565b611f7b816116a2565b82525050565b604082015f820151611f955f850182611a19565b506020820151611fa86020850182611f72565b50505050565b5f604082019050611fc15f830184611f81565b92915050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f5f8201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b5f612021602683611d42565b915061202c82611fc7565b604082019050919050565b5f6020820190508181035f83015261204e81612015565b9050919050565b5f61205f82611957565b6120698185611ccc565b9350612079818560208601611971565b80840191505092915050565b5f6120908284612055565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000005f82015250565b5f6120cf601d83611d42565b91506120da8261209b565b602082019050919050565b5f6020820190508181035f8301526120fc816120c3565b9050919050565b5f81519050919050565b5f61211782612103565b6121218185611d42565b9350612131818560208601611971565b61213a81611999565b840191505092915050565b5f6020820190508181035f83015261215d818461210d565b90509291505056fea2646970667358221220219486cb97f705743ab252f15abbadac79eacf635d78438f8ae5828866e0582d64736f6c63430008180033";
        
        if (account){
            const user = await getUser(account);
            setUser(user);
        
          const network = await provider.getNetwork();
          const chainId = Number(network.chainId);

          const {router , link} = chainData[chainId];
          console.log("router", router, "and link", link);
  
          if (!router || !link) {
              console.error('Unsupported chain ID');
              return;
          }
  
          // Create the agent wallet
          console.log("check pvt key", user.agentPrivateKey);
          const agentWallet = new ethers.Wallet(user.agentPrivateKey, provider);
  
          // Deploy the contract using the agent wallet
          const TokenTransferor = new ethers.ContractFactory(abi, bytecode, agentWallet);
          const tokenTransferor = await TokenTransferor.deploy(router, link);
          
          await tokenTransferor.deploymentTransaction()?.wait();
          console.log('Contract deployed at:', tokenTransferor.getAddress());
          await saveUser(account, user.username, user.agentWalletAddress, user.agentPrivateKey, await tokenTransferor.getAddress());

    
          console.log("Outside fundContract chaindata ccip and link", chainData[chainId].ccip, chainData[chainId].link);
          await fundContract(await tokenTransferor.getAddress(), agentWallet, provider);
        
        }
      } else {
          console.error('MetaMask is not installed');
      }
  }


  const fundContract = async (contractAddress: string, agentWallet: ethers.Wallet, provider: ethers.BrowserProvider) => {
    // CCIP Token Transfer
    const gasPrice = Number((await provider.getFeeData()).gasPrice);
    console.log("Current Gas Price:", ethers.formatUnits(gasPrice? gasPrice: "Not get gas price", "gwei"));
    const txOptions = {
      gasPrice: gasPrice*(2), // Increase gas price to be higher than current
    };
    const network = await provider.getNetwork();
    const chainId = Number(network.chainId);
    console.log("Inside fundContract chaindata ccip and link", chainData[chainId].ccip, chainData[chainId].link);
    const ccipToken = new ethers.Contract(chainData[chainId].ccip , ["function transfer(address to, uint256 amount) public returns (bool)"], agentWallet);
    const ccipAmount = ethers.parseUnits("0.01", 18); // Amount in CCIP tokens
  
    try {
      const ccipTx = await ccipToken.transfer(contractAddress, ccipAmount, txOptions);
      await ccipTx.wait(); // Wait for the transaction to be mined
      console.log(`Funded contract with ${ccipAmount} CCIP tokens`);
    } catch (error) {
      console.error("Error funding with CCIP tokens:", error);
    }
  
    // LINK Token Transfer
    const linkToken = new ethers.Contract(chainData[chainId].link, ["function transfer(address to, uint256 amount) public returns (bool)"], agentWallet);
    const linkAmount = ethers.parseUnits("20", 18); // Amount in LINK tokens
  
    try {
      const linkTx = await linkToken.transfer(contractAddress, linkAmount, txOptions);
      await linkTx.wait(); // Wait for the transaction to be mined
      console.log(`Funded contract with ${linkAmount} LINK tokens`);
    } catch (error) {
      console.error("Error funding with LINK tokens:", error);
    }
  };


  return (
    <>
      <div className="max-w-7xl mx-auto px-4 py-12 mt-24">
        <div className="text-center mb-12">
          <h1 className="text-4xl font-bold text-gray-900 mb-4">
            Welcome to CryptoConnect
          </h1>
          <p className="text-xl text-gray-600 max-w-2xl mx-auto">
            Your gateway to the decentralized social experience. Connect with friends, chat securely, and manage your digital assets all in one place.
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-8 mt-12">
          <div className="bg-white p-6 rounded-xl shadow-sm">
            <h3 className="text-xl font-semibold mb-3">Secure Chat</h3>
            <p className="text-gray-600">End-to-end encrypted messaging with your crypto friends</p>
          </div>
          <div className="bg-white p-6 rounded-xl shadow-sm">
            <h3 className="text-xl font-semibold mb-3">Asset Management</h3>
            <p className="text-gray-600">Track and manage your crypto portfolio with ease</p>
          </div>
          <div className="bg-white p-6 rounded-xl shadow-sm">
            <h3 className="text-xl font-semibold mb-3">Social Network</h3>
            <p className="text-gray-600">Connect with other crypto enthusiasts worldwide</p>
          </div>
        </div>

        <div className="flex items-center justify-center">
          <ScrollingLogos />
        </div>
      </div>
      <RegisterModal isOpen={showModal}  onSubmit={handleSaveUser} />
      {/* Footer now outside the wrapper */}
      <Footer />
    </>
  );
};

export default Home;
